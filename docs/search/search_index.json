{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#abstract","title":"Abstract","text":""},{"location":"#background","title":"Background","text":"<p>Starting with 2021, we received some feedback as follows.</p> <p>There are two clusters A and B. Cluster A is VMware-based and runs mainly Database workloads, and Cluster B is a Kubernetes cluster. Some applications in Cluster B need to access the database in Cluster A, and the network administrator wants the cluster Pods to be managed through an egress gateway.</p>"},{"location":"#features","title":"Features","text":"<p>The gateway provides network egress capabilities for Kubernetes clusters.</p> <ul> <li>Solve IPv4 IPv6 dual-stack connectivity.</li> <li>Solve the high availability of Egress Nodes.</li> <li>Allow filtering Pods Egress Policy (Destination CIDR).</li> <li>Allow filtering of egress Applications (Pods).</li> <li>Can be used in low kernel version.</li> </ul>"},{"location":"#crds","title":"CRDs","text":"<p>The egress gateway model abstracts three Custom Resource Definitions (CRDs): <code>EgressNode</code> , <code>EgressNode</code> and <code>EgressGatewayPolicy</code>. They are cluster scoped CRDs.</p>"},{"location":"#egressgateway","title":"EgressGateway","text":"<pre><code>apiVersion: egressgateway.spidernet.io/v1\nkind: EgressGateway\nmetadata:\n  name: \"egressgateway\"\nspec:\n  nodeSelector:\n    matchLabels:\n      egress: \"true\"\nstatus:\n  nodeList:\n    - name: \"node1\"\n      ready: true\n      active: true\n</code></pre> <ul> <li>spec<ul> <li><code>nodeSelector</code> field matching against node labels.</li> </ul> </li> <li>status<ul> <li><code>nodeList</code> field is the list of nodes matched by <code>nodeSelector</code><ul> <li><code>ready</code> field represents the node status, which may be <code>Ready</code>, <code>NotReady</code> or <code>Unknown</code>.<ul> <li>Only nodes in the <code>Ready</code> state can participate in the election of egress gateway nodes.</li> </ul> </li> <li><code>avtive</code> field represents that the non-egress gateway is reconcile or reconcile completes accessing the destination CIDR(e.g. Cluster A CIDR in picture 1) with this node.</li> <li><code>interfaces</code> is physical network interface list. It is updated by the Agent.<ul> <li><code>ipv4</code> address list.</li> <li><code>ipv6</code> address list.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"#egressnode","title":"EgressNode","text":"<pre><code>apiVersion: egressgateway.spidernet.io/v1\nkind: EgressNode\nmetadata:\n  name: \"node1\"\nspec: {}\nstatus:\n  phase: \"Succeeded\"\n  vxlanIPv4: \"172.31.0.10/16\"\n  vxlanIPv6: \"fe80::/64\"\n  tunnelMac: \"xx:xx:xx:xx:xx\"\n  physicalInterface: \"eth1\"\n  physicalInterfaceIPv4: \"\"\n  physicalInterfaceIPv6: \"\"\n</code></pre> <p>The <code>EgressNode</code> CRD stores vxlan tunnel information, which is generated by the Controller from the Node CR.</p> <ul> <li>status<ul> <li><code>phase</code> indicates the status of EgressNode. If 'Succeeded' has been assigned and the tunnel has been built, 'Pending' is waiting for IP assignment, 'Init' succeeds in assigning the tunnel IP address, and 'Failed' fails to assign the tunnel IP address.</li> <li><code>vxlanIPv4</code> field represents the IPv4 address of VXLAN tunnel.</li> <li><code>vxlanIPv6</code> field represents the IPv6 address of VXLAN tunnel.</li> <li><code>tunnelMac</code> field represents the MAC address of IPv4 VXLAN tunnel Interface.</li> <li><code>physicalInterface</code> is parent name of VXLAN tunnel interface.</li> <li><code>physicalInterfaceIPv4</code> is parent IPv4 Address of VXLAN tunnel interface.</li> <li><code>physicalInterfaceIPv6</code> is parent IPv6 Address of VXLAN tunnel interface.</li> </ul> </li> </ul>"},{"location":"#egressgatewaypolicy","title":"EgressGatewayPolicy","text":"<pre><code>apiVersion: egressgateway.spidernet.io/v1\nkind: EgressGatewayPolicy\nmetadata:\n  name: \"policy\"\nspec:\n  appliedTo:\n    podSelector:\n      matchLabels:\n        app: \"shopping\"\n  destSubnet:\n    - \"10.6.1.0/24\"\n</code></pre> <ul> <li>spec<ul> <li><code>podSelector</code> filed selects the grouping of pods to which the policy applies.</li> <li><code>podSubnet</code> field specifies the pod CIDR affected by the egress policy. It conflicts with the <code>podSelector</code> field.</li> <li><code>destSubnet</code> destination CIDR block list.</li> </ul> </li> </ul>"},{"location":"#datapath","title":"Datapath","text":"<p>A combination of vxlan tunnel, ipset, iptables, route is required to complete policy control.</p>"},{"location":"#non-egress-node","title":"Non Egress Node","text":""},{"location":"#vxlan","title":"VXLAN","text":"<p>Build a VXLAN tunnel on cluster nodes. There are 2 tunnel NICs named <code>egress-vxlan-v4</code> and <code>egress-vxlan-v6</code>.</p>"},{"location":"#ipset","title":"IPSet","text":"<pre><code>sudo ipset create egress-dst-policy-name\nsudo ipset add egress-dest-policy-name 172.16.1.1/32\n</code></pre>"},{"location":"#iptables","title":"IPTables","text":"<pre><code>iptables -t mangle -F EGRESSGATEWAY-MARK-REQUEST-POLICY-NAME\niptables -t mangle -X EGRESSGATEWAY-MARK-REQUEST-POLICY-NAME\niptables -t mangle -N EGRESSGATEWAY-MARK-REQUEST-POLICY-NAME\n\niptables -A EGRESSGATEWAY-MARK-REQUEST-POLICY-NAME \\\n  -t mangle \\\n  -m conntrack --ctdir ORIGINAL \\\n  -m set --match-set egress-dst-policy-name dst \\\n  -m set --match-set egress-src-policy-name src \\\n  -j MARK --set-mark 0x11000000 \\\n  -m comment --comment \"rule uuid: mark request packet\"\n</code></pre>"},{"location":"#route","title":"Route","text":"<p>Normal.</p> <pre><code>ip rule add fwmark 0x11000000 table 100\nip route f table 100\nip route add default via 20.0.0.85 dev egress-vxlan-v4 onlink table 100\n</code></pre> <p>Equal-cost multi-path routing.</p> <pre><code>sysctl -w net.ipv4.fib_multipath_hash_policy=1\n</code></pre> <pre><code>ip rule add fwmark 0x11000000 table 100\nip route f table 100\nip route add table 100 default \\\n  nexthop via 20.0.0.85 dev egress-vxlan onlink \\\n  nexthop via 20.0.0.90 dev egress-vxlan onlink\n</code></pre>"},{"location":"#egress-node","title":"Egress Node","text":"<pre><code>iptables -t mangle -I FORWARD 1 -m mark --mark 0x11000000 -j MARK --set-mark 0x12000000 -m comment --comment \"egress gateway: change mark\"\niptables -t filter -I FORWARD 1 -m mark --mark 0x12000000 -j ACCEPT -m comment --comment \"egress gateway: keep mark\"\niptables -t filter -I OUTPUT 1 -m mark --mark 0x12000000 -j ACCEPT -m comment --comment \"egress gateway: keep mark\"\niptables -t mangle -I POSTROUTING 1 -m mark --mark 0x12000000 -j ACCEPT -m comment --comment \"egress gateway: keep mark\"\niptables -t nat -I POSTROUTING 1 -m mark --mark 0x12000000 -j ACCEPT -m comment --comment \"egress gateway: no snat\"\n</code></pre>"},{"location":"#cni-compatibility","title":"CNI Compatibility","text":""},{"location":"#calico","title":"Calico","text":"<p>Required settings <code>chainInsertMode</code> to <code>Append</code>, for example in the code, more reference calico docs:</p> <pre><code>apiVersion: projectcalico.org/v3\nkind: FelixConfiguration\nmetadata:\n  name: default\nspec:\n  ipv6Support: false\n  ipipMTU: 1400\n  chainInsertMode: Append\n</code></pre>"},{"location":"#implementation","title":"Implementation","text":""},{"location":"#controller","title":"Controller","text":"<p>Controller consists of Webhook Validator and Reconcile Flow.</p> <p></p> <p>Controller has 2 control processes, the first Watch cluster nodes, generate tunnel IP address and MAC address for Node, then <code>Create</code> or <code>Update</code> EgressNode CR Status. The second control flow watch <code>EgressNode</code> and <code>Egressgateway</code>, sync match node list from <code>labelSelector</code>, election egress gateway node.</p>"},{"location":"#agent","title":"Agent","text":"<p>Agent has two control processes, the first Watch <code>EgressNode</code> CR, which manages node tunnel, and node tunnel is a pluggable interface that can be replaced by Geneve. The second control process manages datapath policy, which watches <code>EgressNode</code>, <code>EgressGateway</code> and <code>Egresspolicy</code>, and sends them to the host through the police interface. It is currently implemented by a combination of ipset, iptables, and route, and it can be replaced by eBPF.</p>"},{"location":"develop/dev/","title":"Develop","text":""},{"location":"develop/dev/#local-develop","title":"local develop","text":"<ol> <li> <p><code>make build_local_image</code></p> </li> <li> <p><code>make e2e_init</code></p> </li> <li> <p><code>make e2e_run</code></p> </li> <li> <p>check proscope, browser visits http://nodeIP:4040</p> </li> </ol>"},{"location":"proposal/02-egress-node/EgressNode-zh_CN/","title":"EgressNode zh CN","text":""},{"location":"proposal/02-egress-node/EgressNode-zh_CN/#egressnode-crd","title":"EgressNode CRD","text":"<pre><code>apiVersion: egressgateway.spidernet.io/v1\nkind: EgressNode\nmetadata:\n  name: \"node1\"\nspec:\nstatus:\n  phase: \"Succeeded\"\n  vxlanIPv4IP: \"172.31.0.10/16\"\n  vxlanIPv6IP: \"fe80::/64\"\n  tunnelMac: \"xx:xx:xx:xx:xx\"\n  physicalInterface: \"eth1\"\n  physicalInterfaceIPv4: \"\"\n  physicalInterfaceIPv6: \"\"\n</code></pre> <p>\u7528\u4ee5\u5b58\u50a8\u5404\u8282\u70b9\u7684\u96a7\u9053\u7684\u4fe1\u606f\uff0c\u901a\u8fc7\u76d1\u63a7\u8282\u70b9\u6765\u751f\u6210</p> <p>\u5b57\u6bb5\u8bf4\u660e * status     * <code>phase</code> \u8868\u793a EgressNode  \u7684\u72b6\u6001\uff0c\u2019Succeeded\u2019 \u96a7\u9053IP\u5df2\u5206\u914d\uff0c\u4e14\u96a7\u9053\u5df2\u5efa\u6210\uff0c\u2019Pending\u2019 \u7b49\u5f85\u5206\u914dIP\uff0c\u2019Init\u2019 \u5206\u914d\u96a7\u9053 IP \u6210\u529f\uff0c\u2019Failed\u2019 \u96a7\u9053 IP \u5206\u914d\u5931\u8d25     * <code>vxlanIPv4IP</code> \u96a7\u9053 IPV4 \u5730\u5740     * <code>vxlanIPv6IP</code> \u96a7\u9053 IPV6 \u5730\u5740     * <code>tunnelMac</code> \u96a7\u9053 Mac \u5730\u5740     * <code>physicalInterface</code> \u96a7\u9053\u7236\u7f51\u5361     * <code>physicalInterfaceIPv4</code> \u7236\u7f51\u5361 IPV4 \u5730\u5740     * <code>physicalInterfaceIPv6</code> \u7236\u7f51\u5361 IPV6 \u5730\u5740</p>"},{"location":"proposal/02-egress-node/EgressNode-zh_CN/#controller","title":"controller \u5b9e\u73b0","text":""},{"location":"proposal/02-egress-node/EgressNode-zh_CN/#_1","title":"\u521d\u59cb\u5316","text":"<ol> <li>\u4ece CM\u4e2d\u83b7\u53d6 IPv4\u3001IPv6 \u53ca\u5bf9\u5e94\u7684 CIDR</li> <li>\u4f1a\u68c0\u67e5node \u662f\u5426\u6709\u5bf9\u5e94\u7684 EgressNode\uff0c\u6ca1\u6709\u7684\u8bdd\u5c31\u521b\u5efa\u5bf9\u5e94\u7684EgressNode\uff0c\u4e14\u72b6\u6001\u8bbe\u7f6e\u4e3a \u201cpending\u201d\u3002\u6709\u96a7\u9053 IP \u5219\u5c06 IP \u4e0e\u8282\u70b9\u7ed1\u5b9a\uff0c\u7ed1\u5b9a\u524d\u4f1a\u68c0\u67e5 IP \u662f\u5426\u5408\u6cd5\uff0c\u4e0d\u5408\u6cd5\u5219\u5c06\u72b6\u6001\u8bbe\u7f6e\u4e3a \u201cPending\u201d</li> </ol>"},{"location":"proposal/02-egress-node/EgressNode-zh_CN/#_2","title":"\u8282\u70b9\u4e8b\u4ef6\uff1a","text":"<ul> <li>\u5220\u9664\u4e8b\u4ef6\uff1a\u5220\u9664\u5bf9\u5e94\u7684 EgressNode</li> <li>\u5176\u4ed6\u4e8b\u4ef6\uff1a\u5982\u679c\u6ca1\u6709\u5bf9\u5e94\u7684 EgressNode\uff0c\u5219\u521b\u5efa EgressNode</li> <li> <p>\u5176\u4ed6\u4e8b\u4ef6\uff1a\u5982\u679c\u6709\u5bf9\u5e94\u7684 EgressNode\uff0c\u5219\u5bf9EgressNode\u8fdb\u884c\u6821\u9a8c\u3002\u6821\u9a8c\u903b\u8f91\u5982\u4e0b\uff1a</p> </li> <li> <ul> <li>\u65e0\u96a7\u9053IP\uff0c\u5c06\u72b6\u6001\u7f6e\u4e3a \u201cPending\u201d         \u5982\u679c\u6709\u96a7\u9053IP\uff0c\u5224\u65ad\u662f\u5426\u5408\u6cd5\uff0c\u4e0d\u5408\u6cd5\uff0c\u5c31\u5c06\u72b6\u6001\u7f6e\u4e3a \u201cPending\u201d         \u5982\u679c\u5408\u6cd5\uff0c\u6821\u9a8c IP \u662f\u5426\u5df2\u5206\u914d\uff0c\u5982\u679c\u5df2\u5206\u914d\uff0c\u4e14\u5206\u914d\u7ed9\u5176\u4ed6\u8282\u70b9\u4e86\uff0c\u5219\u5c06\u72b6\u6001\u7f6e\u4e3a \u201cPending\u201d         \u672a\u5206\u914d\u7ed9\u5176\u4ed6\u8282\u70b9\uff0c\u5c31\u5206\u914d\u7ed9\u672c \u201cEgressNode\u201d\uff0c\u5c06\u72b6\u6001\u8bbe\u7f6e\u4e3a \u201cInit\u201d         \u5982\u679c\u5df2\u5206\u914d\uff0c\u4e14\u5c31\u662f\u5206\u914d\u7ed9\u672c\u8282\u70b9\u7684\uff0c\u5219\u5c06\u72b6\u6001\u8bbe\u7f6e\u4e3a \u201cInit\u201d</li> </ul> </li> </ul>"},{"location":"proposal/02-egress-node/EgressNode-zh_CN/#egressnode","title":"EgressNode\u4e8b\u4ef6\uff1a","text":"<ul> <li>\u5220\u9664\u4e8b\u4ef6\uff1a\u5148\u91ca\u653eIP\u3002\u5982\u679c EgressNode \u5bf9\u5e94\u7684\u8282\u70b9\u5b58\u5728\uff0c\u5219\u91ca\u653eIP\uff0c\u91cd\u65b0\u521b\u5efa EgressNode\u3002</li> <li>\u5176\u4ed6\u4e8b\u4ef6\uff1a\u5982\u679c EgressNode \u72b6\u6001\u4e3a \u201cInit\u201d \u6216 \u8005\u201cSucceeded\u201d \u65f6\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5206\u914d IP\uff0c\u5206\u914d\u6210\u529f\u5c06\u72b6\u6001\u8bbe\u7f6e\u4e3a \u201cInit\u201d\uff0c\u5206\u914d\u5931\u8d25\u5c06\u72b6\u6001\u8bbe\u7f6e\u4e3a \u201cFailed\u201d\u3002\u8fd9\u91cc\u662f\u5168\u5c40\u552f\u4e00\u4f1a\u5206\u914d\u96a7\u9053 IP \u7684\u5730\u65b9</li> </ul>"},{"location":"proposal/02-egress-node/EgressNode-zh_CN/#ip","title":"\u5206\u914d\u96a7\u9053 IP","text":"<ul> <li>controller \u542f\u52a8\u65f6\uff0c\u4ece config \u4e2d\u62ff\u5230\u96a7\u9053 IP CRID\uff0c\u5e76\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e00\u4e2a map \u8bb0\u5f55 IP \u662f\u5426\u88ab\u5206\u914d</li> <li>\u96a7\u9053 IP \u91c7\u7528\u4e2d\u5fc3\u5f0f\uff0c\u6240\u4ee5\u4f7f\u7528\u4e32\u884c\u65b9\u5f0f\u5206\u914dIP\uff0c\u5728\u672a\u5206\u914d\u7684 IP \u4e2d\u968f\u673a\u5206\u914d</li> <li>\u5206\u914d\u524d\uff0c\u68c0\u6d4b\u96a7\u9053 IP \u51b2\u7a81\uff0c\u4e0d\u51b2\u7a81\u518d\u5206\u914d\uff08\u5b9e\u73b0\u65b9\u5f0f\u5f85\u5b9a\uff09</li> </ul>"},{"location":"proposal/02-egress-node/EgressNode-zh_CN/#_3","title":"\u5176\u4ed6","text":"<ul> <li>controller \u542f\u52a8\u65f6\uff0c\u5bf9\u6240\u7684 CRD \u7684 IP \u8fdb\u884c\u6821\u9a8c\uff0c\u4e14\u6700\u7ec8\u72b6\u6001\u8bbe\u7f6e\u4e3a \u201cInit\u201d \u6216 \u201cFailed\u201d \uff08\u6b64\u9879\u5f85\u5546\u69b7\uff09</li> <li>agent \u76d1\u6d4b\u5230\u5bf9\u5e94\u7684 CRD \u4e2d phase \u5b57\u6bb5\u4e3a \u201cInit\u201d \u65f6\uff0c\u521b\u5efa\u76f8\u5e94\u7684\u96a7\u9053\u53ca\u8def\u7531\uff0c\u521b\u5efa\u6210\u529f\u66f4\u65b0\u4e3a \u201cSucceeded\u201d \u72b6\u6001\u3002\u5931\u8d25\u5219\u4e0d\u66f4\u65b0</li> <li>Mac\u5730\u5740\u683c\u5f0f\uff1a\u6839\u636e\u8282\u70b9\u540d\u79f0\uff0c\u7ecf\u8fc7 SHA1 \u7b97\u6cd5\u751f\u6210\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u7684 Mac \u5730\u5740\u662f\u56fa\u5b9a\u7684</li> </ul>"},{"location":"usage/install/","title":"Install","text":""},{"location":"usage/install/#requirement","title":"Requirement","text":"<p>Egressgateway currently supports collaboration with Calico CNI and will support collaboration with more CNIs in the future.  Below are the configuration methods for different CNIs:</p>"},{"location":"usage/install/#calico","title":"Calico","text":"<p>Required settings <code>chainInsertMode</code> to <code>Append</code>, for example in the code,  more reference calico docs:</p> <pre><code>apiVersion: projectcalico.org/v3\nkind: FelixConfiguration\nmetadata:\n  name: default\nspec:\n  ipv6Support: false\n  ipipMTU: 1400\n  chainInsertMode: Append # this line\n</code></pre>"},{"location":"usage/install/#install_1","title":"Install","text":""},{"location":"usage/install/#add-helm-repository","title":"Add helm repository","text":"<pre><code>helm repo add egressgateway https://spidernet-io.github.io/egressgateway/\nhelm repo update\n</code></pre>"},{"location":"usage/install/#install-egressgateway","title":"Install egressgateway","text":"<p>The following is a common chart setting option:</p> <pre><code>feature:\n  enableIPv4: true\n  enableIPv6: false # Required pod support IPv6 Stack\n  tunnelIpv4Subnet: \"192.200.0.1/16\" # IPv4 tunnel subnet\n  tunnelIpv6Subnet: \"fd01::21/112\"   # IPv6 tunnel subnet\n  forwardMethod: \"active-active\"     # Support active-active or active-passive\n</code></pre> <pre><code>helm install egressgateway egressgateway/egressgateway --values values.yaml --wait --debug\n</code></pre> <pre><code>kubectl get crd | grep egress\n</code></pre>"},{"location":"usage/install/#create-egressgateway","title":"Create EgressGateway","text":"<p>Create an EgressGateway CR that can set a node as an egress gateway node through matchLabels.</p> <pre><code>apiVersion: egressgateway.spidernet.io/v1\nkind: EgressGateway\nmetadata:\n  name: default\nspec:\n  nodeSelector:\n    matchLabels:\n      kubernetes.io/hostname: workstation2 # change me, select a node in your cluster\n</code></pre>"},{"location":"usage/install/#create-example-app","title":"Create Example App","text":"<p>Create a testing Pod to simulate an application that requires egress.</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    app: mock-app\n  name: mock-app\n  namespace: default\nspec:\n  containers:\n      image: nginx\n      imagePullPolicy: IfNotPresent\n      name: nginx\n      resources: {}\n  dnsPolicy: ClusterFirst\n  enableServiceLinks: true\n  nodeName: workstation1 # change me, select a non-egress gateway node in your cluster\n</code></pre>"},{"location":"usage/install/#create-egressgatewaypolicy","title":"Create EgressGatewayPolicy","text":"<p>By creating an EgressGatewayPolicy CR, you can control which Pod accesses which address needs to go through the egress gateway.</p> <pre><code>apiVersion: egressgateway.spidernet.io/v1\nkind: EgressGatewayPolicy\nmetadata:\n  name: mock-app\nspec:\n  appliedTo:\n    podSelector:\n      matchLabels:\n        app: mock-app\n  destSubnet:\n    - 10.6.1.92/32\n</code></pre> <p>Now traffic from mock-app accessing 10.6.1.92 will be forwarded by the egress gateway.</p>"}]}